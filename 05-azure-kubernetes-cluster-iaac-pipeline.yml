# This is the Azure K8S cluster iaac pipeline for creating the cluster via Azure by executing the 
# terraform scripts via this yaml file we add scripts to execute our terraform scripts



trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:  
- script: echo K8S terraform Azure!
  displayName: 'Run a one-line script debug'


  # Inorder to use the secured file we need to first download that secured file from library
- task: DownloadSecureFile@1
  name: publickey 
  inputs:
    secureFile: 'azure_RSA.pub'


# Force unlock the state before applying or destroying
- script: |
    echo "Forcing unlock of Terraform state..."
    terraform force-unlock -force 779a3f98-067f-38e5-5d19-7a17ac800df3
  workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
  displayName: 'Force Unlock State'

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'azure-resource-manager-service-connection'
#     scriptType: 'bash'
#     scriptLocation: 'scriptPath'
#     scriptPath: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes/import.sh'
#   displayName: 'Import Existing Resource Group'

- task: TerraformCLI@2
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
    # commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_sec)  -var ssh_public_key=$(publickey.secureFilePath)'
    backendType: 'azurerm'
    backendServiceArm: 'azure-resource-manager-service-connection'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'terraform-backend-rg'
    backendAzureRmResourceGroupLocation: 'westeurope'
    backendAzureRmStorageAccountName: 'storageaccountkeninter'
    backendAzureRmContainerName: 'storageaccountkenintercontainer'
    backendAzureRmKey: 'kubernetes-terraform.tfstate'
    # allowTelemetryCollection: false


- task: TerraformCLI@2
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
    environmentServiceName: 'azure-resource-manager-service-connection'
    commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_sec)  -var ssh_public_key=$(publickey.secureFilePath) -lock-timeout=5m'

- task: TerraformCLI@2
  inputs:
    command: 'destroy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
    environmentServiceName: 'azure-resource-manager-service-connection'
    commandOptions: '-lock-timeout=5m'

